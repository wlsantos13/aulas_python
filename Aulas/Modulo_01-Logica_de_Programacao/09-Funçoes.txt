Funções
Imagine que você fez um programinha para gerar estatísticas sobre vários dados dos funcionários: média dos salários, média de vendas, média de feedback positivo, média de feedback negativo, média de notas atribuídas pelos gestores... Você tem uma lista com os salários, uma lista com o total de vendas de cada funcionário, e assim sucessivamente. Então você fez o seguinte trecho de código:

soma = 0
for elemento in lista:
    soma = elemento
media = soma/len(lista)
Em seguida, você copiou e colou esse trecho de código várias vezes mudando "lista" pelo nome de cada lista individual, e "media" pelo nome do atributo. Trabalhoso, certo? Imagine que agora você percebeu o erro no trecho acima, e terá que sair corrigindo em todos os lugares onde colou o código errado. Imagina que conveniente se você pudesse arrumar apenas uma vez e todas as ocorrências fossem corrigidas automaticamente...

1. Funções
Uma função é um pedacinho de programa. Nós podemos dar um nome para nossa função, e toda vez que precisarmos que esse pedacinho de programa seja executado, nós o chamamos pelo nome.

Com isso, podemos evitar repetição de código, tornando nossos códigos mais enxutos e legíveis. Além disso, fica mais fácil corrigir problemas como o ilustrado no início deste capítulo.

1.1. Criando funções
Em Python, podemos criar funções com o comando def, e em seguida damos um nome para nossa função.

def minhaPrimeiraFuncao():
    print('Olá Mundo')
Se você executar o código acima, o que aparecerá na tela? Nada. Tudo que o código acima faz é definir minhaPrimeiraFuncao, mas ela só será executada quando for chamada pelo nome.

# criando a função
def minhaPrimeiraFuncao():
    print('Olá Mundo')

# o programa começa de verdade aqui:
minhaPrimeiraFuncao() # chamada para a função
Quando chamamos uma função, a execução do programa principal é pausada, o fluxo de execução é desviado para a função, e ao final dela ele retornará para o ponto onde parou. Veja o exemplo abaixo:

# criando a função
def minhaPrimeiraFuncao():
    print('Olá Mundo')

# o programa começa de verdade aqui:
print('aaa')
minhaPrimeiraFuncao() # chamada para a função
print('bbb')
O resultado na tela será:

aaa
Olá Mundo
bbb
1.1.2. Parâmetros de uma função
Nossas funções devem ser tão genéricas quanto possível se quisermos reaproveitá-las ao máximo.

Um dos pontos onde devemos tomar cuidado é na entrada de dados da função: se usarmos um input dentro da função, teremos uma função que resolverá um certo problema desde que o usuário vá digitar os dados do problema. Mas e se quisermos usar a função em um trecho do programa onde o usuário digita os dados e em outro ponto onde os dados são lidos de um arquivo?

Podemos resolver isso fazendo a leitura de dados no programa principal, fora de nossa função, e então passaremos os dados para a função. Dados passados para a função são chamados de parâmetros ou argumentos de uma função. Observe o exemplo abaixo:

def soma(a, b):
    resultado = a + b
    print(resultado)

soma(3, 2) # resultado na tela: 5
soma(4, 7) # resultado na tela: 11
x = 5
soma(10, x) # resultado na tela: 15
Quando colocamos "a" e "b" entre parênteses na criação da função, estamos especificando que a função recebe 2 parâmetros. O primeiro valor que for passado entre parênteses para nossa função será referenciado por "a" e o segundo será referenciado por "b". É como se "a" e "b" fossem variáveis que vão receber a cópia dos valores passados para a função. Note que podemos passar valores puros ou variáveis (como fizemos com "x" na última linha), e não precisamos criar variáveis "a" e "b" em nosso programa principal para "casar" com os parâmetros da função.

1.1.3. Retorno de uma função
Certas funções possuem uma "resposta": elas resolvem um problema (por exemplo, uma equação matemática) e nós estamos interessados no resultado. No exemplo anterior, tínhamos uma soma e nós imprimíamos a soma na tela.

Porém, ainda pensando na questão da função ser genérica: será que nós sempre queremos o resultado na tela? Imagine que você esteja utilizando a fórmula de Bháskara para resolver uma equação de segundo grau. No meio da fórmula existe uma raiz quadrada. Nós não queremos o resultado da raiz quadrada na tela, nós queremos o resultado dentro do nosso programa em uma variável para jogar em outra equação.

Bom, parece fácil: vamos tentar pegar o resultado fora da função... Certo?

def soma(a, b):
    resultado = a + b

media = resultado/2
print(media)
Se você executar o programa acima, verá uma mensagem de erro dizendo que "resultado" não existe. Toda variável criada dentro de uma função é privada. Ela só pode ser acessada dentro da função e será destruída ao final da execução da função. Para disponibilizar para o programa um valor que foi gerado dentro da função, utilizamos o comando return.

def soma(a, b):
    resultado = a + b
    return resultado

s = soma(10, 5)
media = s/2
print(media)
Quando fizemos s = soma(10, 5), a função soma foi chamada, e ao final da execução, s recebeu o valor retornado por ela. Deste ponto em diante podemos utilizar a "resposta" da nossa função em nosso programa principal.

O return, além de disponibilizar um valor, encerra a execução da função. Se a sua função possuir outras linhas após o return, elas serão ignoradas.

2. Recursividade
Uma função pode chamar outra função? Sim. Rode o programa abaixo e observe que ele funciona:

def soma(a, b):
    resultado = a + b
    return resultado

def media(x, y):
    s = soma(x, y)
    resultado = s/2
    return resultado

m = media(10, 5)
print(m)
Mas e se uma função referenciasse ela mesma? Isso também funciona, e chama-se função recursiva, ou recursão.

A ideia vem da matemática. Vejamos um exemplo. Imagine uma função matemática f(x) que seja igual a 2 elevado a x. Podemos reescrevê-la da seguinte maneira:

f(x) =

1, se x = 0
2 * f(x-1), se x > 0
Ou seja, imagine que você queira calcular f(4). Como 4 > 0, teremos: f(4) = 2 * f(3) Precisamos expandir f(3): f(4) = 2 * (2 * f(2)) E assim sucessivamente: f(4) = 2 * (2 * (2 * f(1))) f(4) = 2 * (2 * (2 * (2 * f(0)))) Opa, f(0) nós conhecemos: está definido lá em cima como 1. Portanto: f(4) = 2 * 2 * 2 * 2 * 1 f(4) = 16

Note que nós decompomos um problema em várias instâncias "menores" do problema. Quebramos a formulação de uma multiplicação enorme por vários casos de 2 x f(n). Chamamos essa estratégia de dividir para conquistar, e ela envolve identificar 2 etapas bastante claras do problema:

Caso base: é um caso para o qual temos um valor conhecido (no exemplo acima, f(0) = 1)
Caso geral: é a chamada recursiva, onde faremos referência à própria função.
Note também que esse comportamento tem o comportamento de pilha: se colocamos 3 pratos empilhados sobre a mesa, precisamos tirar primeiro o último que colocamos, certo? Caso contrário, a pilha toda tomba. No caso da recursão, para obter f(4) caímos em f(3), depois f(2), depois f(1), depois f(0) e foi para ele que obtivemos a primeira resposta, que em seguida usamos para calcular f(1), depois calcular f(2), depois f(3) e só então chegamos em f(4). O primeiro passo do problema foi o último a ser resolvido.

Em Python, nossa função ficaria assim:

def potenciadedois(x):
    if x == 0:
        return 1
    else:
        return 2*potenciadedois(x-1)
Se chamarmos potenciadedois(4), o que acontecerá? O programa começará a executar a função, cairá no else e encontrará a função chamada novamente. Neste caso, ele salva x valendo 4 e salva que a execução foi interrompida nessa linha. Então ele cria um novo x valendo 3, cai novamente no else e salva que a execução foi interrompida nessa linha, e assim sucessivamente.

Note que para cada passo recursivo, as variáveis da função são copiadas e também é salvo o ponto onde a execução parou. Ou seja, funções recursivas podem consumir bastante memória, além de tempo de processamento para ficar criando cópias. A vantagem delas é o rigor matemático: podemos transcrever funções matemáticas quase exatamente como elas são, sem criar loops e variáveis para ficar guardando estados.

