2. Programação Orientada a Objeto
O grande objetivo da programação orientada a objeto é a reutilização de código. Os programas devem ser modularizados, de modo que diferentes pessoas possam implementar módulos diferentes e juntá-los ao final. A integração entre os módulos deve ser relativamente simples, e se possível um módulo deve poder ser reaproveitado em outros sistemas.

Isso é feito através da modelagem das entidades que compõem um problema ou interagirão com o sistema. Utilizamos a ideia de classes e objetos para representar as informações que cada entidade possui e os comportamentos que elas apresentam.

2.1. Classes
Uma classe é um modelo genérico para criarmos entidades (objetos). Na classe nós especificamos as informações e os comportamentos que os objetos terão. Todos os objetos pertencentes a uma mesma classe terão características em comum.

2.2. Objetos
Podemos dizer que as classes são ideias abstratas, enquanto objetos são instâncias concretas da classe. Por exemplo, podemos dizer que "Pessoa" é uma classe. Quando pensamos em "Pessoa", já imaginamos uma figura com cabeça, olhos, nariz, boca, tronco, mãos e pés que normalmente anda sobre 2 pernas e se comunica com a voz. Você, leitor, e eu, escritor, somos objetos da classe "Pessoa". Somos reais, existimos, temos diversas características em comum, mas cada um de nós tem suas particularidades, como diferenças de altura, forma, cor, voz etc.

2.3. Métodos
Para modelar o comportamento dos nossos objetos, podemos criar funções dentro da classe. Elas são funções como qualquer outra, mas tipicamente terão pelo menos um parâmetro: uma referência para o objeto que está realizando a ação. Essas funções também não podem ser executadas arbitrariamente, mas deverão ser chamadas necessariamente pelos objetos. Essas "funções do objeto" são chamadas de métodos.

2.4. Atributos
Para armazenar os dados dos nossos objetos, podemos criar variáveis internas nos objetos. Essas variáveis são particulares de cada objeto, ou seja, diferentes objetos de uma mesma classe normalmente terão as mesmas variáveis, mas o valor delas não necessariamente será igual. Chamamos essas "variáveis do objeto" de atributos.

Quatro princípios básicos nos ajudam a fazer uma boa modelagem:

Encapsulamento: cada classe deve conter todas as informações necessárias para seu funcionamento bem como todos os métodos necessários para alterar essas informações. Idealmente, apenas objetos da própria classe poderão alterar seus atributos, e objetos de outras classes irão interagir com eles através de métodos.
Abstração: as classes devem apresentar interfaces simples para o uso por outros desenvolvedores e para a interação com outras classes. Todos os detalhes complicados de seu funcionamento devem estar "escondidos" dentro de métodos simples de usar, com parâmetros e retornos bem definidos. Um exemplo disso é um smartphone: por dentro ele possui circuitos extremamente complexos e softwares avançadíssimos, mas para o usuário ele apresenta uma interface simples com poucos botões e vários ícones intuitivos na tela.
Herança: se várias classes terão atributos e métodos em comum, não devemos ter que redigitá-los várias vezes. Ao invés disso, criamos uma classe com esses atributos comuns e as outras classes irão herdá-los.
Polimorfismo: objetos de diferentes classes herdeiras de uma mesma classe mãe podem ser tratados genericamente como objetos pertencentes à classe mãe.
