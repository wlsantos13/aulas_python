Listas
Já fizemos alguns programas para ler 2 ou 3 notas e calcular a média. Inclusive já fomos além e aprendemos a verificar se o aluno passou ou não. Vamos rever um exemplo desses:

nota1 = float(input('Digite a primeira nota: '))
nota2 = float(input('Digite a segunda nota: '))

media = (nota1 + nota2)/2

print(media)
Simples, certo? Mas e se a regra da escola mudasse, e agora cada professor precisasse aplicar 4 provas? Modificaríamos nosso programa:

nota1 = float(input('Digite a primeira nota: '))
nota2 = float(input('Digite a segunda nota: '))
nota3 = float(input('Digite a terceira nota: '))
nota4 = float(input('Digite a quarta nota: '))

media = (nota1 + nota2 + nota3 + nota4)/4

print(media)
Até aqui tudo bem. Mas e se o objetivo fosse testar o quanto o professor conseguiu ensinar? Para isso, poderíamos calcular a média das médias de todos os alunos do professor. Mas e se o professor trabalha em uma faculdade muito grande e suas turmas tem 80 alunos?

aluno1 = float(input('Digite a nota do aluno 1: '))
aluno2 = float(input('Digite a nota do aluno 2: '))
aluno3 = float(input('Digite a nota do aluno 3: '))
aluno4 = float(input('Digite a nota do aluno 4: '))
aluno5 = float(input('Digite a nota do aluno 5: '))
aluno6 = float(input('Digite a nota do aluno 6: '))
aluno7 = float(input('Digite a nota do aluno 7: '))
aluno8 = float(input('Digite a nota do aluno 8: '))
aluno9 = float(input('Digite a nota do aluno 9: '))
aluno10 = float(input('Digite a nota do aluno 10: '))

# ...

```
Nota do programador: eu me demito. 
Não ganho bem o suficiente pra ISSO!
```
Para trabalhar com poucos valores, é fácil e conveniente criar uma variável para cada valor e realizar operações individualmente sobre cada uma. Porém, dizemos que esse tipo de solução não é escalável: o programa não está preparado para lidar com variações no tamanho da base de dados, e modificá-lo para comportá-las pode ser difícil, trabalhoso ou mesmo inviável. Imagine se para cada novo perfil em uma rede social o estagiário precisasse criar uma variável nova para o nome, uma para o e-mail, uma para a data de nascimento, e assim sucessivamente... E depois ainda precisasse de linhas novas de código para ler cada um desses valores do novo usuário!

1. Listas
É aí que entram as listas. Listas são coleções de objetos em Python. Falando de maneira simplificada, são variáveis que comportam diversos valores ao mesmo tempo. Vejamos alguns jeitos de criar listas em Python:

primeiralista = [] # cria uma lista vazia
segundalista = list() # cria uma lista vazia
terceiralista = [1, 3.14, 5, 7, 9, 'onze'] # lista com valores
Note que podemos misturar tipos de dados. A terceiralista possui 4 int, um float e uma str.

Bom, e agora, como fazemos para acessar cada valor? Podemos imaginar a lista da seguinte maneira: imagine que ao invés de ter uma caixa para guardar cada item, temos uma cômoda com várias gavetas. Cada item está em uma gaveta. Não estamos acostumados a dizer que algo está na terceira gaveta do armário? A ideia é a mesma: a lista é uma coleção indexada, ou seja, podemos acessar cada elemento através de índices, que são números indicando a posição. A indexação é automática e começa a partir do zero:

elemento	1	3.14	5	7	9	11
índice	0	1	2	3	4	5
Portanto, para acessar o elemento "7" da nossa lista, utilizaríamos o índice 3. Informamos o índice entre colchetes:

terceiralista = [1, 3.14, 5, 7, 9, 'onze'] # lista com valores
print(terceiralista[3])
A lista é mutável. Isso significa que podemos modificar os valores já existentes:

terceiralista = [1, 3.14, 5, 7, 9, 'onze'] # lista com valores
terceiralista[3] = 'sete' # troca 7 por 'sete' na lista
print(terceiralista)
2. Quebrando listas
É possível pegar subconjuntos de nossas listas utilizando o conceito de slices. Ao invés de passar apenas 1 valor entre colchetes (o índice desejado), podemos passar faixas de valores. Veja o exemplo abaixo:

impares = [1, 3, 5, 7, 9, 11, 13, 15, 17]
meio = impares[3:6]
print(meio) # resultado na tela: [7, 9, 11]
O primeiro valor é o índice inicial da sublista a ser gerada, e o segundo é o índice final (exclusivo). Podemos omitir um desses valores para indicar que será desde o início ou até o final:

impares = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
primeirametade = impares[:5]
segundametade = impares[5:]
print(primeirametade) # resultado: [1, 3, 5, 7, 9]
print(segundametade) # resultado: [11, 13, 15, 17, 19]
Além de índices inicial e final, podemos também passar um passo para os índices. Veja o exemplo abaixo:

numeros = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# múltiplos de 3 abaixo de 10:
mult3sub10 = numeros[3:10:3]
print(mult3sub10) # resultado: [3, 6, 9]
3. Percorrendo listas
Suponha que você queira acessar cada elemento de sua lista individualmente. Digitar todos os índices manualmente cancelaria a escalabilidade do programa, certo? Portanto, podemos usar um loop para gerar os índices:

pares = [0, 2, 4, 6, 8]
tamanho = len(pares)

# tamanho vale 5, logo indice recebe os valores 0, 1, 2, 3 e 4
for indice in range(tamanho):
    print(pares[indice])
Porém, tem um jeito ainda mais fácil de percorrer a lista. O for não serve apenas para gerar sequências numéricas junto do range: ele serve para percorrer coleções. Portanto, podemos trocar o range pela própria lista:

pares = [0, 2, 4, 6, 8]

for elemento in pares:
    print(elemento)
Assim como no caso das contagens, "elemento" é apenas uma variável que será criada de forma automática e poderia ter qualquer nome. Em cada repetição do loop, um valor diferente da lista será copiado para elemento.

Importante: Como os elementos são copiados, caso você modifique o valor de elemento você não irá modificar o valor na lista, e sim uma cópia dele. Além disso, como este loop serve especificamente para percorrer listas, se dentro dele você fizer operações que alterem o tamanho da lista (append ou remove, por exemplo), o loop poderá executar incorretamente, pulando ou repetindo elementos.

